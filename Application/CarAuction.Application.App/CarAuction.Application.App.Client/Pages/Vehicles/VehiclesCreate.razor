@page "/vehicles/create"
@using CarAuction.Business.Core
@using CarAuction.Structure.Dto.Read
@using CarAuction.Structure.Dto.Search
@using CarAuction.Structure.Dto.Write
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IDialogService? DialogService

<PageTitle>CarAuctions - VehiclesCreate</PageTitle>

<MudStack Class="mt-5">
    <EditForm Model="@form" OnSubmit="OnSubmitAsync">
        <DataAnnotationsValidator />
        <MudGrid>
            <!-- Identifier and Type -->
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudTextField @bind-Value="form.VehicleUniqueIdentifier" Label="Identifier" Variant="Variant.Text" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudSelect T="VehicleType" @bind-Value="FormVehicleType" Label="Vehicle type">
                                @foreach (var vehicleType in VehicleTypes)
                                {
                                    <MudSelectItem Value="vehicleType">@(vehicleType.ToString())</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>            
            <!-- Manufacturer and Model -->
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudSelect T="int" @bind-Value="form.VehicleManufacturerID" Label="Manufacturer">
                                <MudSelectItem Value="0">Select manufacturer</MudSelectItem>
                                @foreach (var manufacturer in Manufacturers)
                                {
                                    <MudSelectItem Value="manufacturer.VehicleManufacturerID">@(manufacturer.VehicleManufacturerName)</MudSelectItem>
                                }
                            </MudSelect>                            
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>            
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudSelect T="int" @bind-Value="form.VehicleModelID" Label="Model">
                                <MudSelectItem Value="0">Select model</MudSelectItem>
                                @foreach (var model in Models.Where(m => m.VehicleManufacturerID == form.VehicleManufacturerID))
                                {
                                    <MudSelectItem Value="model.VehicleModelID">@(model.VehicleModelName)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>            
            <!-- Year and Starting bid -->
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudNumericField @bind-Value="form.VehicleYear" Label="Year" Variant="Variant.Text" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudNumericField @bind-Value="form.VehicleStartingBid" Label="Starting Bid" Variant="Variant.Text" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <!-- Number of doors, seats, load capacity -->
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true">
                            @if (FormVehicleType == VehicleType.Hatchback || FormVehicleType == VehicleType.Sedan)
                            {
                                <MudNumericField @bind-Value="form.VehicleNumberOfDoors" Label="Doors" Variant="Variant.Text" />
                            }
                            @if (FormVehicleType == VehicleType.SUV)
                            {
                                <MudNumericField @bind-Value="form.VehicleNumberOfSeats" Label="Seats" Variant="Variant.Text" />
                            }
                            @if (FormVehicleType == VehicleType.Truck)
                            {
                                <MudNumericField @bind-Value="form.VehicleLoadCapacity" Label="Load capacity" Variant="Variant.Text" />
                            }                            
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <!-- Submit -->
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="d-flex flex-row flex-grow-1 gap-4">
                    <MudPaper Elevation="0">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                   Color="Color.Primary" Class="ml-auto">
                            Create
                        </MudButton>
                    </MudPaper>
                </MudPaper>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem>
                <MudPaper Elevation="0">
                    @foreach (var formError in FormErrors)
                    {
                        <MudText Color="@(Color.Error)">@(formError)</MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudStack>

@code {
    protected VehicleManufacturerDetailResponseDto[] Manufacturers = [];

    protected VehicleModelDetailResponseDto[] Models = [];

    public CreateVehicleRequestDto form = new();

    public List<string> FormErrors = new();

    public VehicleType FormVehicleType;

    public VehicleType[] VehicleTypes = [VehicleType.Hatchback, VehicleType.Sedan, VehicleType.SUV, VehicleType.Truck];

    protected override async Task OnInitializedAsync()
    {
        var manufacturers = await httpClient.GetFromJsonAsync<VehicleManufacturerDetailResponseDto[]>($"{navigationManager.BaseUri}api/manufacturers/list");
        if (manufacturers != null) Manufacturers = manufacturers;

        var models = await httpClient.GetFromJsonAsync<VehicleModelDetailResponseDto[]>($"{navigationManager.BaseUri}api/models/list");
        if (models != null) Models = models;

        await base.OnInitializedAsync();
    }

    public async Task OnSubmitAsync(EditContext context)
    {
        if (!context.Validate())
        {
            FormErrors = context.GetValidationMessages().ToList();

            return;
        }
        else
        {
            FormErrors.Clear();

            form.VehicleType = FormVehicleType;
            var httpResponseMessage = await httpClient.PostAsJsonAsync<CreateVehicleRequestDto>($"{navigationManager.BaseUri}api/vehicles/create", form);            
            if (httpResponseMessage.IsSuccessStatusCode)
            {
                await DialogService.ShowMessageBox("Result", "Vehicle created");
            }
            else
            {
                var response = await httpResponseMessage.Content.ReadFromJsonAsync<CreateEntityResponseDto>();
                await DialogService.ShowMessageBox("Result", response.Message);
            }
        }

        StateHasChanged();
    }
}
